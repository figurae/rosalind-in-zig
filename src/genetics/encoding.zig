const std = @import("std");

const TranslationResult = enum { stop, amino_acid };
const Result = union(TranslationResult) { stop: bool, amino_acid: u8 };

pub fn translateCodonToAminoAcid(codon: []const u8) Result {
    const codon_enum = std.meta.stringToEnum(Codon, codon).?;

    const result: Result = switch (codon_enum) {
        .UUU, .UUC => .{ .amino_acid = 'F' },
        .UUA, .UUG, .CUU, .CUC, .CUA, .CUG => .{ .amino_acid = 'L' },
        .UCU, .UCC, .UCA, .UCG, .AGU, .AGC => .{ .amino_acid = 'S' },
        .UAU, .UAC => .{ .amino_acid = 'Y' },
        .UAA, .UAG, .UGA => .{ .stop = true },
        .UGU, .UGC => .{ .amino_acid = 'C' },
        .UGG => .{ .amino_acid = 'W' },
        .CCU, .CCC, .CCA, .CCG => .{ .amino_acid = 'P' },
        .CAU, .CAC => .{ .amino_acid = 'H' },
        .CAA, .CAG => .{ .amino_acid = 'Q' },
        .CGU, .CGC, .CGA, .CGG, .AGA, .AGG => .{ .amino_acid = 'R' },
        .AUU, .AUC, .AUA => .{ .amino_acid = 'I' },
        .AUG => .{ .amino_acid = 'M' },
        .ACU, .ACC, .ACA, .ACG => .{ .amino_acid = 'T' },
        .AAU, .AAC => .{ .amino_acid = 'N' },
        .AAA, .AAG => .{ .amino_acid = 'K' },
        .GUU, .GUC, .GUA, .GUG => .{ .amino_acid = 'V' },
        .GCU, .GCC, .GCA, .GCG => .{ .amino_acid = 'A' },
        .GAU, .GAC => .{ .amino_acid = 'D' },
        .GAA, .GAG => .{ .amino_acid = 'E' },
        .GGU, .GGC, .GGA, .GGG => .{ .amino_acid = 'G' },
    };

    return result;
}

const Codon = enum {
    UUU,
    UUC,
    UUA,
    UUG,
    UCU,
    UCC,
    UCA,
    UCG,
    UAU,
    UAC,
    UAA,
    UAG,
    UGU,
    UGC,
    UGA,
    UGG,
    CUU,
    CUC,
    CUA,
    CUG,
    CCU,
    CCC,
    CCA,
    CCG,
    CAU,
    CAC,
    CAA,
    CAG,
    CGU,
    CGC,
    CGA,
    CGG,
    AUU,
    AUC,
    AUA,
    AUG,
    ACU,
    ACC,
    ACA,
    ACG,
    AAU,
    AAC,
    AAA,
    AAG,
    AGU,
    AGC,
    AGA,
    AGG,
    GUU,
    GUC,
    GUA,
    GUG,
    GCU,
    GCC,
    GCA,
    GCG,
    GAU,
    GAC,
    GAA,
    GAG,
    GGU,
    GGC,
    GGA,
    GGG,
};
